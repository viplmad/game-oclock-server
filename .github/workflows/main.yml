name: Rust CI

# This workflow is triggered on pushes to the repository.

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  analysis:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      # Setup the rust environment
      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: nightly-2024-02-04
          components: rustfmt, clippy

      # Install analysis dependencies
      - run: cargo install cargo-audit cargo-outdated
      # cargo-deny cargo-udeps

      # Analyse
      - run: cargo clippy --message-format json > clippy-report.json
      - run: cargo audit --json > audit-report.json
        continue-on-error: true
      - run: cargo outdated --workspace --depth 1 --format json > outdated-report.json
    # - run: cargo deny init && cargo deny --format json check 2> deny-report.json
    #   continue-on-error: true
    # - run: cargo udeps --quiet --workspace --all-features --all-targets --output json > udeps-report.json

      # Upload report
      - uses: actions/upload-artifact@v4.3.1
        with:
          name: reports
          path: |
            clippy-report.json
            audit-report.json
            outdated-report.json
          # deny-report.json
          # udeps-report.json

  sonar:
    needs: analysis
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/download-artifact@v4
        with:
          name: reports

      # Setup the rust environment
      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: nightly-2024-02-04
          components: rustfmt, clippy

      # Install cargo-sonar
      - run: cargo install cargo-sonar

      # Transform reports
      - run: |
          cargo sonar --clippy --clippy-path clippy-report.json --sonar-path sonar-clippy-report.json
          cargo sonar --audit --audit-path audit-report.json --sonar-path sonar-audit-report.json
          cargo sonar --outdated --outdated-path outdated-report.json --sonar-path sonar-outdated-report.json
     #    cargo sonar --deny --deny-path deny-report.json --sonar-path sonar-deny-report.json
     #    cargo sonar --udeps --udeps-path udeps-report.json --sonar-path sonar-udeps-report.json

      - uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: '"filePath":"[\w\/\-\.]*"' 
          replace: '"filePath":"Cargo.lock"'
          include: "**sonar-audit-report.json"
          regex: true
      - uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: '"filePath":"[\w\/\-\.]*"' 
          replace: '"filePath":"Cargo.lock"'
          include: "**sonar-outdated-report.json"
          regex: true

      # Upload sonar report
      - uses: SonarSource/sonarcloud-github-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=sonar-clippy-report.json,sonar-audit-report.json,sonar-outdated-report.json
          # ,sonar-deny-report.json,sonar-udeps-report.json

      # Upload report
      - uses: actions/upload-artifact@v4.3.1
        with:
          name: sonar-reports
          path: |
            sonar-clippy-report.json
            sonar-audit-report.json
            sonar-outdated-report.json
          # sonar-deny-report.json
          # sonar-udeps-report.json

  build:
    needs: analysis
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0

      # Setup the rust environment
      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: nightly-2024-02-04
          components: rustfmt, clippy

      # Build
      - run: cargo build --release
